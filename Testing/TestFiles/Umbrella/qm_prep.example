
mol new complex.parm7
mol addfile start.rst7

set qmPDB "syst-qm.pdb"
set qmPSF "syst-qm.QMonly.parm7"
set idDictFileName "syst-qm.idDict.txt"

set sel [atomselect 0 all]
$sel set beta 0
$sel set occupancy 0

set seltext "(ATOMSEL)"
[atomselect 0 "$seltext"] set beta 1

puts "Initializing chain and QM region loops."
set systemSegs [lsort -unique [[atomselect 0 "protein or nucleic"] get chain]]
set systemQMregs [lsort -unique [[atomselect 0 "(protein or nucleic) and beta > 0"] get beta]]

puts "Chains: $systemSegs"
puts "QM Regions: $systemQMregs"

foreach seg $systemSegs {
    foreach qmReg $systemQMregs {
        puts "
Checking QM region $qmReg in chain $seg"
        set qmmmm [atomselect 0 "(protein and name CA) and beta == $qmReg and chain $seg"]
        set cter [lindex [lsort -unique -integer [[atomselect 0 "chain $seg"] get resid]] end]
        set listqmmm [$qmmmm get resid]
        puts "Protein residues marked for QM this region in this chain: $listqmmm"
        list QM1bond
        list QM2bond
        puts "Checking N-Terminal-direction QM-MM bonds..."
        foreach resTest $listqmmm {
            if { [ lsearch $listqmmm [ expr $resTest -1 ] ] < 0 } {
                lappend QM1bond [ expr $resTest -1 ]
            }
        }
        puts "Checking C-terminal-direction QM-MM bonds..."
        foreach resTest $listqmmm {
             if { $resTest == $cter} {
                continue
            }
            if { [ lsearch $listqmmm [ expr $resTest +1 ] ] < 0 } {
                lappend QM2bond $resTest
            }
        }
        puts "Making changes..."
        if {[info exists QM2bond]} {
            [atomselect 0 "name CA C and (resid $QM2bond and chain $seg)"] set occupancy 1
            [atomselect 0 "name C O and (resid $QM2bond and chain $seg)"] set beta 0
            unset QM2bond
        }
        if {[info exists QM1bond]} {
            [atomselect 0 "name CA C and (resid $QM1bond and chain $seg)"] set occupancy 1
            [atomselect 0 "name C O and (resid $QM1bond and chain $seg)"] set beta $qmReg
            unset QM1bond
        }
       set qmmmm [atomselect 0 "(nucleic and name P) and beta == $qmReg and chain $seg"]
        set fiveTer [lindex [lsort -unique -integer [[atomselect 0 "chain $seg"] get resid]] 0]
        set listqmmm [$qmmmm get resid]
        puts "Nucleic residues marked for QM this region in this chain: $listqmmm"

        list QM1bond
        list QM2bond
        puts "Checking 3'-Terminal-direction QM-MM bonds..."
        foreach resTest $listqmmm {
            if {[ lsearch $listqmmm [ expr $resTest +1 ] ] < 0 } {
                lappend QM1bond [ expr $resTest +1 ]
            }
        }

        puts "Checking 5'-terminal-direction QM-MM bonds..."
        foreach resTest $listqmmm {"}
            if { $resTest == $fiveTer} {
                continue
            }
            if { [ lsearch $listqmmm [ expr $resTest -1 ] ] < 0 } {
                lappend QM2bond $resTest
            }
        }

       puts "Making changes..."
        if {[info exists QM2bond]} {
            [atomselect 0 "name C4' C5' and (resid $QM2bond and chain $seg)"] set occupancy 1
            [atomselect 0 "name P O1P O2P O5' C5' H5' H5'' and (resid $QM2bond and chain $seg)"] set beta 0
            unset QM2bond
        }
        if {[info exists QM1bond]} {
            [atomselect 0 "name C4' C5' and (resid $QM1bond and chain $seg)"] set occupancy 1
            [atomselect 0 "name P O1P O2P O5' C5' H5' H5'' and (resid $QM1bond and chain $seg)"] set beta $qmReg
            unset QM1bond
        }
    }
}

puts "Setting atom elements"

package require topotools

topo guessatom element mass

puts "Elements guessed!"

foreach qmReg $systemQMregs {
    set qmnum [[atomselect 0 "beta == $qmReg"] num]
    set dummy [ [atomselect 0 "beta == $qmReg and occupancy > 0"] num ]
    puts "QM Region $qmReg contains $qmnum QM atoms and $dummy dummy atoms"
}

$sel writepdb $qmPDB

[ atomselect 0 "beta > 0" ] writepsf $qmPSF

set qmsel [ atomselect 0 "beta > 0" ]

set indxs [ $qmsel get index ]

set fileId [open $idDictFileName "w"]

for {set i 0} { $i < [$qmsel num] } {incr i} {

    set ID [lindex $indxs $i]

    set data "$i $ID"

    puts $fileId $data
}

close $fileId
  
quit

